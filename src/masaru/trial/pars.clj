(ns masaru.trial.pars
  (:require [masaru.core :refer :all]))

(defn pairs
  "generates all possible matchings of n pairs of parentheses."
  [n]
  (if (zero? n)
    [""]
    (for [m (range n)
          p (pairs m)
          q (pairs (dec (- n m)))]
      (str \( p \) q))))

(def STATES
  (let [P [0
           [:S]
           [:S :S \( :S \)]]]
    {0 {\( (P 1)
        \) (P 1)
        :$ (P 1)
        :S 1}
     1 {\( 2
        :$ (P 0)}
     2 {\( (P 1)
        \) (P 1)
        :$ (P 1)
        :S 3}
     3 {\( 2
        \) 4}
     4 {\( (P 2)
        \) (P 2)
        :$ (P 2)}}))

(def STATES'
  (let [P [0
           [:S]
           [:S \( :S \) :S]]]
    {0 {\( 2
        \) (P 1)
        :$ (P 1)
        :S 1}
     1 {:$ (P 0)}
     2 {\( 2
        \) (P 1)
        :$ (P 1)
        :S 3}
     3 {\) 4}
     4 {\( 2
        \) (P 1)
        :$ (P 1)
        :S 5}
     5 {\) (P 2)
        :$ (P 2)}}))

(defn pairs*3
  "generates all possible matchings from n pairs of any of the three
  types of brackets: round, square, or curly."
  [n]
  (if (zero? n)
    [""]
    (for [m (range n)
          p (pairs*3 m)
          q (pairs*3 (dec (- n m)))
          [l r] ["()" "[]" "{}"]]
      (str l p r q))))

(def STATES*3
  (let [P {1 [:S]
           2 [:S :S \( :S \)]
           3 [:S :S \[ :S \]]
           4 [:S :S \{ :S \}]}
        V #{\( \) \[ \] \{ \} :$}
        opening-s {\( 1 \[ 2 \{ 3}
        all-reduce-by-rule (fn [n] (reduce #(assoc %1 %2 (P n)) {} V))
        epsilon-r (all-reduce-by-rule 1)]
    [(assoc epsilon-r :S 10)
     (assoc epsilon-r :S 9)
     (assoc epsilon-r :S 8)
     (assoc epsilon-r :S 7)
     (all-reduce-by-rule 4)
     (all-reduce-by-rule 3)
     (all-reduce-by-rule 2)
     (assoc opening-s \} 4)
     (assoc opening-s \] 5)
     (assoc opening-s \) 6)
     (assoc opening-s :$ 0)]))

(defn count-pairs
  "returns a map from bracket symbols to their counts. since this
  grammar is not ambiguous, there is no need to wrap the result in a
  higher collection."
  ([s] {s 1})
  ([s vs]
   (when-let [vs (seq vs)] ;; otherwise the Ïµ-rule (P 1) gets applied
     (transduce (comp (map meta) (map :res))
                (partial merge-with +)
                vs))))

(comment

  ;; here we use anamorphic implementations for generating pairs,
  ;; which are as efficient as the memoized versions of the
  ;; hylomorphic functions above

  (def pairs
    (->> '([""])
         (iterate (fn [pss]
                    (-> (fn [ps qs] (for [p ps q qs] (str \( p \) q)))
                        (mapcat pss (reverse pss))
                        vec
                        (cons pss))))
         (map first)))

  (def pairs*3
    (->> '([""])
         (iterate (fn [pss]
                    (-> (fn [ps qs] (for [p ps q qs [l r] ["()" "[]" "{}"]] (str l p r q)))
                        (mapcat pss (reverse pss))
                        vec
                        (cons pss))))
         (map first)))

  (take 11 (map count pairs))
  => (1 1 2 5 14 42 132 429 1430 4862 16796)
  ;; https://en.wikipedia.org/wiki/Catalan_number

  (take 8 (map count pairs*3))
  => (1 3 18 135 1134 10206 96228 938223)
  ;; https://oeis.org/

  (->> (nth pairs 8)
       (map (partial number-of-parses STATES))
       (every? (partial = 1))
       assert)

  (->> (nth pairs 8)
       (map (partial number-of-parses STATES'))
       (every? (partial = 1))
       assert)

  (->> (map first pairs)
       (take 11)
       (map (partial parse-for-result STATES count-pairs)))
  => (nil
      {\( 1, \) 1}
      {\( 2, \) 2}
      {\( 3, \) 3}
      {\( 4, \) 4}
      {\( 5, \) 5}
      {\( 6, \) 6}
      {\( 7, \) 7}
      {\( 8, \) 8}
      {\( 9, \) 9}
      {\( 10, \) 10})

  (doseq [s (nth pairs*3 3)]
    (prn s (parse-for-result STATES*3 count-pairs s)))
  ;; "((()))" {\( 3, \) 3}
  ;; "[(())]" {\[ 1, \( 2, \) 2, \] 1}
  ;; "{(())}" {\{ 1, \( 2, \) 2, \} 1}
  ;; "([()])" {\( 2, \[ 1, \) 2, \] 1}
  ;; "[[()]]" {\[ 2, \( 1, \) 1, \] 2}
  ;; "{[()]}" {\{ 1, \[ 1, \( 1, \) 1, \] 1, \} 1}
  ;; "({()})" {\( 2, \{ 1, \) 2, \} 1}
  ;; "[{()}]" {\[ 1, \{ 1, \( 1, \) 1, \} 1, \] 1}
  ;; "{{()}}" {\{ 2, \( 1, \) 1, \} 2}
  ;; "(([]))" {\( 2, \[ 1, \] 1, \) 2}
  ;; "[([])]" {\[ 2, \( 1, \] 2, \) 1}
  ;; "{([])}" {\{ 1, \( 1, \[ 1, \] 1, \) 1, \} 1}
  ;; "([[]])" {\( 1, \[ 2, \] 2, \) 1}
  ;; "[[[]]]" {\[ 3, \] 3}
  ;; "{[[]]}" {\{ 1, \[ 2, \] 2, \} 1}
  ;; "({[]})" {\( 1, \{ 1, \[ 1, \] 1, \} 1, \) 1}
  ;; "[{[]}]" {\[ 2, \{ 1, \] 2, \} 1}
  ;; "{{[]}}" {\{ 2, \[ 1, \] 1, \} 2}
  ;; "(({}))" {\( 2, \{ 1, \} 1, \) 2}
  ;; "[({})]" {\[ 1, \( 1, \{ 1, \} 1, \) 1, \] 1}
  ;; "{({})}" {\{ 2, \( 1, \} 2, \) 1}
  ;; "([{}])" {\( 1, \[ 1, \{ 1, \} 1, \] 1, \) 1}
  ;; "[[{}]]" {\[ 2, \{ 1, \} 1, \] 2}
  ;; "{[{}]}" {\{ 2, \[ 1, \} 2, \] 1}
  ;; "({{}})" {\( 1, \{ 2, \} 2, \) 1}
  ;; "[{{}}]" {\[ 1, \{ 2, \} 2, \] 1}
  ;; "{{{}}}" {\{ 3, \} 3}
  ;; "(()())" {\( 3, \) 3}
  ;; "[()()]" {\[ 1, \( 2, \) 2, \] 1}
  ;; "{()()}" {\{ 1, \( 2, \) 2, \} 1}
  ;; "([]())" {\( 2, \[ 1, \] 1, \) 2}
  ;; "[[]()]" {\[ 2, \] 2, \( 1, \) 1}
  ;; "{[]()}" {\{ 1, \[ 1, \] 1, \( 1, \) 1, \} 1}
  ;; "({}())" {\( 2, \{ 1, \} 1, \) 2}
  ;; "[{}()]" {\[ 1, \{ 1, \} 1, \( 1, \) 1, \] 1}
  ;; "{{}()}" {\{ 2, \} 2, \( 1, \) 1}
  ;; "(()[])" {\( 2, \) 2, \[ 1, \] 1}
  ;; "[()[]]" {\[ 2, \( 1, \) 1, \] 2}
  ;; "{()[]}" {\{ 1, \( 1, \) 1, \[ 1, \] 1, \} 1}
  ;; "([][])" {\( 1, \[ 2, \] 2, \) 1}
  ;; "[[][]]" {\[ 3, \] 3}
  ;; "{[][]}" {\{ 1, \[ 2, \] 2, \} 1}
  ;; "({}[])" {\( 1, \{ 1, \} 1, \[ 1, \] 1, \) 1}
  ;; "[{}[]]" {\[ 2, \{ 1, \} 1, \] 2}
  ;; "{{}[]}" {\{ 2, \} 2, \[ 1, \] 1}
  ;; "((){})" {\( 2, \) 2, \{ 1, \} 1}
  ;; "[(){}]" {\[ 1, \( 1, \) 1, \{ 1, \} 1, \] 1}
  ;; "{(){}}" {\{ 2, \( 1, \) 1, \} 2}
  ;; "([]{})" {\( 1, \[ 1, \] 1, \{ 1, \} 1, \) 1}
  ;; "[[]{}]" {\[ 2, \] 2, \{ 1, \} 1}
  ;; "{[]{}}" {\{ 2, \[ 1, \] 1, \} 2}
  ;; "({}{})" {\( 1, \{ 2, \} 2, \) 1}
  ;; "[{}{}]" {\[ 1, \{ 2, \} 2, \] 1}
  ;; "{{}{}}" {\{ 3, \} 3}
  ;; "(())()" {\( 3, \) 3}
  ;; "[()]()" {\[ 1, \( 2, \) 2, \] 1}
  ;; "{()}()" {\{ 1, \( 2, \) 2, \} 1}
  ;; "(())[]" {\( 2, \) 2, \[ 1, \] 1}
  ;; "[()][]" {\[ 2, \( 1, \) 1, \] 2}
  ;; "{()}[]" {\{ 1, \( 1, \) 1, \} 1, \[ 1, \] 1}
  ;; "(()){}" {\( 2, \) 2, \{ 1, \} 1}
  ;; "[()]{}" {\[ 1, \( 1, \) 1, \] 1, \{ 1, \} 1}
  ;; "{()}{}" {\{ 2, \( 1, \) 1, \} 2}
  ;; "([])()" {\( 2, \[ 1, \] 1, \) 2}
  ;; "[[]]()" {\[ 2, \] 2, \( 1, \) 1}
  ;; "{[]}()" {\{ 1, \[ 1, \] 1, \} 1, \( 1, \) 1}
  ;; "([])[]" {\( 1, \[ 2, \] 2, \) 1}
  ;; "[[]][]" {\[ 3, \] 3}
  ;; "{[]}[]" {\{ 1, \[ 2, \] 2, \} 1}
  ;; "([]){}" {\( 1, \[ 1, \] 1, \) 1, \{ 1, \} 1}
  ;; "[[]]{}" {\[ 2, \] 2, \{ 1, \} 1}
  ;; "{[]}{}" {\{ 2, \[ 1, \] 1, \} 2}
  ;; "({})()" {\( 2, \{ 1, \} 1, \) 2}
  ;; "[{}]()" {\[ 1, \{ 1, \} 1, \] 1, \( 1, \) 1}
  ;; "{{}}()" {\{ 2, \} 2, \( 1, \) 1}
  ;; "({})[]" {\( 1, \{ 1, \} 1, \) 1, \[ 1, \] 1}
  ;; "[{}][]" {\[ 2, \{ 1, \} 1, \] 2}
  ;; "{{}}[]" {\{ 2, \} 2, \[ 1, \] 1}
  ;; "({}){}" {\( 1, \{ 2, \} 2, \) 1}
  ;; "[{}]{}" {\[ 1, \{ 2, \} 2, \] 1}
  ;; "{{}}{}" {\{ 3, \} 3}
  ;; "()(())" {\( 3, \) 3}
  ;; "[](())" {\[ 1, \] 1, \( 2, \) 2}
  ;; "{}(())" {\{ 1, \} 1, \( 2, \) 2}
  ;; "()[()]" {\( 2, \) 2, \[ 1, \] 1}
  ;; "[][()]" {\[ 2, \] 2, \( 1, \) 1}
  ;; "{}[()]" {\{ 1, \} 1, \[ 1, \( 1, \) 1, \] 1}
  ;; "(){()}" {\( 2, \) 2, \{ 1, \} 1}
  ;; "[]{()}" {\[ 1, \] 1, \{ 1, \( 1, \) 1, \} 1}
  ;; "{}{()}" {\{ 2, \} 2, \( 1, \) 1}
  ;; "()([])" {\( 2, \) 2, \[ 1, \] 1}
  ;; "[]([])" {\[ 2, \] 2, \( 1, \) 1}
  ;; "{}([])" {\{ 1, \} 1, \( 1, \[ 1, \] 1, \) 1}
  ;; "()[[]]" {\( 1, \) 1, \[ 2, \] 2}
  ;; "[][[]]" {\[ 3, \] 3}
  ;; "{}[[]]" {\{ 1, \} 1, \[ 2, \] 2}
  ;; "(){[]}" {\( 1, \) 1, \{ 1, \[ 1, \] 1, \} 1}
  ;; "[]{[]}" {\[ 2, \] 2, \{ 1, \} 1}
  ;; "{}{[]}" {\{ 2, \} 2, \[ 1, \] 1}
  ;; "()({})" {\( 2, \) 2, \{ 1, \} 1}
  ;; "[]({})" {\[ 1, \] 1, \( 1, \{ 1, \} 1, \) 1}
  ;; "{}({})" {\{ 2, \} 2, \( 1, \) 1}
  ;; "()[{}]" {\( 1, \) 1, \[ 1, \{ 1, \} 1, \] 1}
  ;; "[][{}]" {\[ 2, \] 2, \{ 1, \} 1}
  ;; "{}[{}]" {\{ 2, \} 2, \[ 1, \] 1}
  ;; "(){{}}" {\( 1, \) 1, \{ 2, \} 2}
  ;; "[]{{}}" {\[ 1, \] 1, \{ 2, \} 2}
  ;; "{}{{}}" {\{ 3, \} 3}
  ;; "()()()" {\( 3, \) 3}
  ;; "[]()()" {\[ 1, \] 1, \( 2, \) 2}
  ;; "{}()()" {\{ 1, \} 1, \( 2, \) 2}
  ;; "()[]()" {\( 2, \) 2, \[ 1, \] 1}
  ;; "[][]()" {\[ 2, \] 2, \( 1, \) 1}
  ;; "{}[]()" {\{ 1, \} 1, \[ 1, \] 1, \( 1, \) 1}
  ;; "(){}()" {\( 2, \) 2, \{ 1, \} 1}
  ;; "[]{}()" {\[ 1, \] 1, \{ 1, \} 1, \( 1, \) 1}
  ;; "{}{}()" {\{ 2, \} 2, \( 1, \) 1}
  ;; "()()[]" {\( 2, \) 2, \[ 1, \] 1}
  ;; "[]()[]" {\[ 2, \] 2, \( 1, \) 1}
  ;; "{}()[]" {\{ 1, \} 1, \( 1, \) 1, \[ 1, \] 1}
  ;; "()[][]" {\( 1, \) 1, \[ 2, \] 2}
  ;; "[][][]" {\[ 3, \] 3}
  ;; "{}[][]" {\{ 1, \} 1, \[ 2, \] 2}
  ;; "(){}[]" {\( 1, \) 1, \{ 1, \} 1, \[ 1, \] 1}
  ;; "[]{}[]" {\[ 2, \] 2, \{ 1, \} 1}
  ;; "{}{}[]" {\{ 2, \} 2, \[ 1, \] 1}
  ;; "()(){}" {\( 2, \) 2, \{ 1, \} 1}
  ;; "[](){}" {\[ 1, \] 1, \( 1, \) 1, \{ 1, \} 1}
  ;; "{}(){}" {\{ 2, \} 2, \( 1, \) 1}
  ;; "()[]{}" {\( 1, \) 1, \[ 1, \] 1, \{ 1, \} 1}
  ;; "[][]{}" {\[ 2, \] 2, \{ 1, \} 1}
  ;; "{}[]{}" {\{ 2, \} 2, \[ 1, \] 1}
  ;; "(){}{}" {\( 1, \) 1, \{ 2, \} 2}
  ;; "[]{}{}" {\[ 1, \] 1, \{ 2, \} 2}
  ;; "{}{}{}" {\{ 3, \} 3}

  )
